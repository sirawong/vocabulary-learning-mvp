version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: vocab-mongodb-dev
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-vocabulary_db}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_dev:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - vocab-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vocab-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - vocab-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Text Service (Port 8000) - API Gateway
  text-service:
    build:
      context: ./services/text-service
      dockerfile: Dockerfile.dev
    container_name: vocab-text-service-dev
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      NODE_ENV: development
      PORT: 8000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@mongodb:27017/${MONGO_DATABASE:-vocabulary_db}?authSource=admin
      REDIS_URL: redis://redis:6379
      DICTIONARY_SERVICE_URL: http://dictionary-service:8002
      LEARNING_SERVICE_URL: http://learning-service:8003
    volumes:
      - ./services/text-service/src:/app/src
      - ./services/text-service/package.json:/app/package.json
      - ./services/text-service/tsconfig.json:/app/tsconfig.json
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vocab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dictionary Service (Port 8002)
  dictionary-service:
    build:
      context: ./services/dictionary-service
      dockerfile: Dockerfile.dev
    container_name: vocab-dictionary-service-dev
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      NODE_ENV: development
      PORT: 8002
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@mongodb:27017/${MONGO_DATABASE:-vocabulary_db}?authSource=admin
      REDIS_URL: redis://redis:6379
      DICTIONARY_API_KEY: ${DICTIONARY_API_KEY:-}
    volumes:
      - ./services/dictionary-service/src:/app/src
      - ./services/dictionary-service/package.json:/app/package.json
      - ./services/dictionary-service/tsconfig.json:/app/tsconfig.json
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vocab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Learning Service (Port 8003)
  learning-service:
    build:
      context: ./services/learning-service
      dockerfile: Dockerfile.dev
    container_name: vocab-learning-service-dev
    restart: unless-stopped
    ports:
      - "8003:8003"
    environment:
      NODE_ENV: development
      PORT: 8003
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@mongodb:27017/${MONGO_DATABASE:-vocabulary_db}?authSource=admin
      REDIS_URL: redis://redis:6379
    volumes:
      - ./services/learning-service/src:/app/src
      - ./services/learning-service/package.json:/app/package.json
      - ./services/learning-service/tsconfig.json:/app/tsconfig.json
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vocab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: vocab-frontend-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_DICTIONARY_URL: http://localhost:8002
      NEXT_PUBLIC_LEARNING_URL: http://localhost:8003
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/next.config.js:/app/next.config.js
      - ./frontend/tailwind.config.js:/app/tailwind.config.js
      - ./frontend/tsconfig.json:/app/tsconfig.json
    depends_on:
      - text-service
      - dictionary-service
      - learning-service
    networks:
      - vocab-network

networks:
  vocab-network:
    driver: bridge

volumes:
  mongodb_data_dev:
    driver: local
  redis_data_dev:
    driver: local
    